// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package dao is a generated GoMock package.
package dao

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/jphillips2121/games-api/models"
	reflect "reflect"
)

// MockDAO is a mock of DAO interface
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateNewGame mocks base method
func (m *MockDAO) CreateNewGame(game *models.Game) (*models.GameResponse, error) {
	ret := m.ctrl.Call(m, "CreateNewGame", game)
	ret0, _ := ret[0].(*models.GameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewGame indicates an expected call of CreateNewGame
func (mr *MockDAOMockRecorder) CreateNewGame(game interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewGame", reflect.TypeOf((*MockDAO)(nil).CreateNewGame), game)
}

// GetListGames mocks base method
func (m *MockDAO) GetListGames() (*models.GameResponseList, error) {
	ret := m.ctrl.Call(m, "GetListGames")
	ret0, _ := ret[0].(*models.GameResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListGames indicates an expected call of GetListGames
func (mr *MockDAOMockRecorder) GetListGames() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListGames", reflect.TypeOf((*MockDAO)(nil).GetListGames))
}

// GetGame mocks base method
func (m *MockDAO) GetGame(ID string) (*models.GameResponse, error) {
	ret := m.ctrl.Call(m, "GetGame", ID)
	ret0, _ := ret[0].(*models.GameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame
func (mr *MockDAOMockRecorder) GetGame(ID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockDAO)(nil).GetGame), ID)
}

// UpdateGame mocks base method
func (m *MockDAO) UpdateGame(ID string, newGame *models.Game) (bool, bool, error) {
	ret := m.ctrl.Call(m, "UpdateGame", ID, newGame)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGame indicates an expected call of UpdateGame
func (mr *MockDAOMockRecorder) UpdateGame(ID, newGame interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGame", reflect.TypeOf((*MockDAO)(nil).UpdateGame), ID, newGame)
}

// DeleteGame mocks base method
func (m *MockDAO) DeleteGame(id, developer string) (bool, bool, error) {
	ret := m.ctrl.Call(m, "DeleteGame", id, developer)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteGame indicates an expected call of DeleteGame
func (mr *MockDAOMockRecorder) DeleteGame(id, developer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockDAO)(nil).DeleteGame), id, developer)
}
